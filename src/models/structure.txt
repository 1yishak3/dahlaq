What the data will look like.


Legend: txt=text
        #=number/unique identification system
        bool=boolean
a post ID will be represented by

{{uid}}+{{time}}

A message thread ID will be represented by

{{UserName1}}+{{UserName2}}+{{Date_Started}}



Users will have the following properties

 User: {
   "preferences":[{"uid":"//likiliness(normal probability=0.5)"},{}],
   "likes":[{
     "postId":"",
     "time":"the time it was liked"
     },{}
   ],
   "dislikes":[{
     "postId":"",
     "time":"the time it was disliked"
     },{}
   ],
   "reports":[{"postId":"","time":"time it was reported"],
   "userPosts":["postId"],
   "properties":{
     "username":"txt",
     "digits":"txt",
     "fame":"#",
     "bio":"txt",
     "city":"txt",
     "food":"txt",
     "rank":"#",
     "education":"txt",
     "relationshipStatus":"txt"
   },
   "people":{"threadID"{
     "senderName":"txt",
     "userName":"txt"
     "senderDigits":"#",
     "lastMessage":"txt",

   },},
   "viewables":["postID",""]

 }


 Chats will be like this

 "chats":{"threadID":[
   "messages_":[
     {
       "sender":"username",
       "receiver":"username",
       "content":"ABC",
       "time":"time"
     }
   ]
 ]}

 Posts will be like this


"posts": {
   "postId":"",
   "time":"#time",
   "poster":{
     "username":"#A",
     "digits":"##",
     "uId":"#",
     "userImage":"",
     "desiredReach":""
   },
   "content":{
     "desciption":"",
     "imageUrl":"",
     "likes":[{"userId":"","time":""},{}],
     "dislikes":[{"userId":"","time":""},{}],
     "reports":[{"userId":"","time":""}],
     "reach":[{"userId":"","time":""}],
     "boosts":[{"userId":"","time":"","bReach":""}]
   },
   "deleted":""
 }

Sample= [
  {
    user: {
      avatar: 'assets/img/marty-avatar.png',
      name: 'Marty McFly'
    },
    date: 'November 5, 1955',
    image: 'assets/img/advance-card-bttf.png',
    content: 'Wait a minute. Wait a minute, Doc. Uhhh... Are you telling me that you built a time machine... out of a DeLorean?! Whoa. This is heavy.',
  },
  {
    user: {
      avatar: 'assets/img/sarah-avatar.png.jpeg',
      name: 'Sarah Connor'
    },
    date: 'May 12, 1984',
    image: 'assets/img/advance-card-tmntr.jpg',
    content: 'I face the unknown future, with a sense of hope. Because if a machine, a Terminator, can learn the value of human life, maybe we can too.'
  },
  {
    user: {
      avatar: 'assets/img/ian-avatar.png',
      name: 'Dr. Ian Malcolm'
    },
    date: 'June 28, 1990',
    image: 'assets/img/advance-card-jp.jpg',
    content: 'Your scientists were so preoccupied with whether or not they could, that they didn\'t stop to think if they should.'
  }
];






SECURITY IS AN ISSUE RIGHT NW. A USER MUST NOT BE ABLE TO GET TO ANOTHER USERS PROFILE AND EDIT IT IN ANY WAY.
THIS NEEDS SOME WORK, BUT NOT AN ISSUE FOR MVP MAYBE?







Add a list of Uids to the root of your Database, it will be much faster to iterate through them and check until the
post number reaches 20 instead of loading the ENTIRE user data just to do that same thing.




Your Users list can be ordered according to the fame level, this would reduce work for and will be
done inside one of your cloud functions.

The backend functions must do a lot more than what user currently requires, because the user will
always need more really soon. We don't want to access the backend on a request bases...although that would be more efficient. we need
to think about this a bit more.

We'll take care of preferences issues last, we might omit for mmmmmmmmmmvp

 //TODO:


 You need to add Local Forage features to check first time usage and as such.

 Caching should also be a thing, and I think local forage should be a great way to do it

 For tonight, try to get data from the user about their post and add that to your post object.
 will use firebase to send that post to the database, where it will be processed

 Also work on that settings page ONLY AUTHENTICATED USER can access.


 Messages are going to be dynamic. User's side continuously listens to new messages and visualizes the text be typed. Like a live stream. not so difficult
 You can update the firebase info on the go until the typer hits the send button, at which point updating the message halts indefinitely. This starts at the placement of the
 in the text area and ends at the touch of the send button.
 Don't forget the read unread thing. It won't be hard but you know, still.


 All images videos and files are to be kept inside the storage and will be linked to the realtime database
